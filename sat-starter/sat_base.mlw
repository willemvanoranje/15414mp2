module SatDefs

use int.Int
use ref.Ref
use list.List
use list.Length as List
use list.Mem
use list.Quant as Q
use array.Array
use array.ArrayEq
use array.NumOfEq
use option.Option

(******************************************************************************)
(* Basic types and predicates, from previous assignment                       *)
(******************************************************************************)

let function (==) (a b : bool) : bool
    ensures { result <-> ((not a /\ not b) \/ (a /\ b)) }
    =
    match a with
    | True -> b
    | False -> not b
    end

type var = int (* DO NOT CHANGE *)

type lit = { var : var ; sign : bool }                  (* DO NOT CHANGE *)

type clause = list lit                                  (* DO NOT CHANGE *)

predicate vars_in_range (n : int) (c : clause) =
  forall l:lit. mem l c -> 0 <= l.var < n

type cnf = { clauses : array clause ; nvars : int }     (* DO NOT CHANGE *)
  invariant { nvars >= 0 }                              (* DO NOT CHANGE *)
  invariant { forall i:int. 0 <= i < length clauses ->  (* DO NOT CHANGE *)
              vars_in_range nvars clauses[i] }
  by { clauses = Array.make 0 Nil; nvars = 0 }

type valuation = array bool                             (* DO NOT CHANGE *)

predicate valid_valuation (rho : valuation) (cnf : cnf) =
  length rho = cnf.nvars                                (* DO NOT CHANGE *)

predicate clause_sat_with (rho : valuation) (c : clause) =
  exists l:lit. mem l c && rho[l.var] = l.sign

predicate sat_with (rho : valuation) (cnf : cnf) =      (* DO NOT CHANGE *)
  forall i:int. 0 <= i < length cnf.clauses ->
  clause_sat_with rho cnf.clauses[i]

let rec function bool_eq (b1 : bool) (b2 : bool)
  ensures { result <-> (b1 <-> b2) }
  = (b1 && b2) || (not(b1) && not(b2)) 
    
let rec eval_clause (rho : valuation) (c : clause) : bool =
  variant { c }
  requires { vars_in_range (length rho) c }
  ensures  { result = clause_sat_with rho c }
  match c with
    | Nil -> false
    | Cons l ls ->
      rho[l.var] == l.sign || eval_clause rho ls
  end

let eval_cnf (rho : array bool) (cnf : cnf) : bool =
  requires { valid_valuation rho cnf }
  ensures { result = sat_with rho cnf }
  let sat = ref true in
  for i = 0 to length cnf.clauses - 1 do
    invariant { !sat <-> forall j:int. 0 <= j < i ->
                clause_sat_with rho cnf.clauses[j] = true }
    if not (eval_clause rho cnf.clauses[i]) then
      sat := false
  done ;
  !sat

(******************************************************************************)
(* Helpful definitions and utility functions                                  *)
(******************************************************************************)

predicate var_in_clause (v : var) (c : clause) =
  exists l. mem l c && l.var = v

predicate sign_in_clause (v : var) (c : clause) (b : bool) =
  (exists l. mem l c && l.var = v && l.sign = b)

predicate equal_clause (c1 : clause) (c2 : clause) =
  forall l. mem l c1 <-> mem l c2

let rec var_in_clause (v : var) (c : clause) : bool
  ensures { result <-> exists l. l.var = v && mem l c }
  variant { c }
  =
  Q.mem (fun l1 l2 -> l1.var = l2.var) { var=v ; sign=false } c

let rec lit_in_clause (l : lit) (c : clause) : bool
  ensures   { result <-> mem l c }
  ensures   { result <-> (sign_in_clause l.var c l.sign) }
  variant   { c }
  =
  Q.mem (fun l1 l2 -> l1.var = l2.var && l1.sign == l2.sign) l c

let rec check_clause_contained (c1 : clause) (c2 : clause) : bool
  ensures   { result <-> forall l. mem l c1 -> mem l c2 }
  variant   { c1 }
  =
  match c1 with
  | Nil -> true
  | Cons l ls -> (lit_in_clause l c2) && (check_clause_contained ls c2)
  end

let rec check_equal_clause (c1 : clause) (c2 : clause) : bool
  ensures   { result <-> equal_clause c1 c2 }
  variant   { c1 }
  =
  let c1_contained = check_clause_contained c1 c2 in
  let c2_contained = check_clause_contained c2 c1 in
  c1_contained && c2_contained

let clause_in_cnf (c : clause) (cnf : cnf) : bool
  ensures   { result <-> exists i. 0 <= i < cnf.clauses.length && equal_clause c cnf.clauses[i] }
  =
  let ref r = false in
  for i = 0 to cnf.clauses.length - 1 do
    invariant { r <-> exists j. 0 <= j < i && equal_clause c cnf.clauses[j] }
    if r then ()
    else r <- check_equal_clause c cnf.clauses[i]
  done ;
  r

(******************************************************************************)
(* Partial valuations                                                         *)
(******************************************************************************)

type pval = array (option bool)                         (* DO NOT CHANGE *)

predicate valid_pval (pval : pval) (cnf : cnf) =
  length pval = cnf.nvars                               (* DO NOT CHANGE *)

predicate pval_eq (pval pval' : pval) = array_eq pval pval'

predicate assigned (pval : pval) (v : var) = pval[v] <> None

predicate compatible (pval : pval) (rho : valuation) =
  forall i:int, b:bool. 0 <= i < length pval ->
  pval[i] = Some b -> rho[i] = b

predicate sat_with_pval (pval : pval) (cnf : cnf) =
  forall rho:valuation. compatible pval rho -> sat_with rho cnf

predicate complete (pval : pval) =
  forall v. 0 <= v < length pval -> assigned pval v

(******************************************************************************)
(* Partial evaluation of CNFs                                                 *)
(******************************************************************************)

type cnf_status =                                       (* DO NOT CHANGE *)
  | Sat
  | Conflict clause
  | Unit_clause lit
  | Other

type clause_status =                                    (* DO NOT CHANGE *)
  | Satisfied
  | Conflicting
  | Unit lit
  | Unresolved

exception Conflict_found clause
exception Unit_found lit

predicate lit_sat (pval : pval) (lit : lit) =
  0 <= lit.var < pval.length /\
  exists b. pval[lit.var] = Some b /\ lit.sign = b

predicate lit_conflict (pval : pval) (lit : lit) =
  0 <= lit.var < pval.length /\
  exists b. pval[lit.var] = Some b /\ lit.sign <> b

predicate lit_unresolved (pval : pval) (lit : lit) =
  0 <= lit.var < pval.length /\
  pval[lit.var] = None

let rec function partial_eval_clause (pval : pval) (c : clause) : clause_status =
requires { vars_in_range (pval.length) c }
ensures { result = Satisfied <-> 
          (exists lit. sign_in_clause (lit.var) c (lit.sign) 
           /\ lit_sat pval lit) }
ensures { result = Conflicting <->
          (forall lit. sign_in_clause (lit.var) c (lit.sign) ->
           lit_conflict pval lit) }
ensures { forall lit. result = Unit lit -> 
          (sign_in_clause (lit.var) c (lit.sign) 
           /\ lit_unresolved pval lit
           /\ (forall lit'. lit' <> lit 
               /\ sign_in_clause (lit'.var) c (lit'.sign) ->
               lit_conflict pval lit'))}
variant { c }
  match c with
  | Nil -> Conflicting 
  | Cons x Nil -> (
    match pval[x.var] with
    | None -> Unit x
    | Some b -> if bool_eq x.sign b then Satisfied else Conflicting
    end)
  | Cons x xs -> (
    let rec_res = partial_eval_clause pval xs in
    match pval[x.var] with
    | None -> (
      match rec_res with
      | Satisfied -> Satisfied
      | Conflicting -> Unit x
      | Unit _ -> Unresolved
      | Unresolved -> rec_res
      end)
    | Some b -> (
        if bool_eq b x.sign then Satisfied else
        match rec_res with
        | Satisfied -> Satisfied
        | Conflicting -> Conflicting
        | Unit _ -> rec_res
        | Unresolved -> rec_res
        end)
    end)
  end

let partial_eval_cnf (pval : pval) (cnf : cnf) : cnf_status =
requires { forall i. 0 <= i < cnf.clauses.length -> 
           vars_in_range pval.length cnf.clauses[i] }
ensures { result = Sat <-> 
          (forall i. 0 <= i < cnf.clauses.length -> 
           partial_eval_clause pval cnf.clauses[i] = Satisfied) }
ensures { forall clause. result = Conflict clause -> 
          (exists i. 0 <= i < cnf.clauses.length 
           /\ partial_eval_clause pval cnf.clauses[i] = Conflicting) }
ensures { forall lit. result = Unit_clause lit -> 
          (exists i. 0 <= i < cnf.clauses.length 
           /\ partial_eval_clause pval cnf.clauses[i] = Unit lit) }
  try ( 
    let ref res = Sat in
    let ref i = 0 in 
    while i < cnf.clauses.length do  
    invariant { 0 <= i <= cnf.clauses.length }
    invariant { res = Sat <-> 
                (forall j. 0 <= j < i -> 
                 partial_eval_clause pval cnf.clauses[j] = Satisfied) }
    invariant { res = Sat \/ res = Other }
    variant { cnf.clauses.length - i }
      let clause = cnf.clauses[i] in
      match partial_eval_clause pval clause with
      | Conflicting -> raise Conflict_found clause
      | Unit l -> raise Unit_found l
      | Unresolved -> res <- Other
      | Satisfied -> ()
      end ;
      i <- i + 1;
    done ;
    res)
  with
  | Conflict_found clause -> Conflict clause
  | Unit_found l -> Unit_clause l
  end

end (* SatDefs *)