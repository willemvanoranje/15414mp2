
module ResolutionProof

  use int.Int
  use ref.Ref
  use list.List
  use list.Length as List
  use list.Append
  use list.Mem
  use array.Array
  use array.ArrayEq
  use option.Option

  use SatDefs (* From sat_base.mlw *)

  type certificate = unit (* Define a type for certificates; you may want to define  *)

  predicate valid_refutation (p : certificate) (cnf : cnf) = false (* Specify the set of valid refutations *)

  let check_refutation (p : certificate) (cnf : cnf) : bool
    requires { true } (* Any necessary preconditions *)
    ensures { result <-> valid_refutation p }  (* DO NOT CHANGE POSTCONDITION *)
    =
    false (* Implement the contract for this function *)

end (* ResolutionProof *)