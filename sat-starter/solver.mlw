module SatDefs

use int.Int
use ref.Ref
use list.List
use list.Length as List
use list.Mem
use list.Quant as Q
use array.Array
use array.ArrayEq
use array.NumOfEq
use option.Option

(******************************************************************************)
(* Basic types and predicates, from previous assignment                       *)
(******************************************************************************)

let function (==) (a b : bool) : bool
    ensures { result <-> ((not a /\ not b) \/ (a /\ b)) }
    =
    match a with
    | True -> b
    | False -> not b
    end

type var = int (* DO NOT CHANGE *)

type lit = { var : var ; sign : bool }                  (* DO NOT CHANGE *)

type clause = list lit                                  (* DO NOT CHANGE *)

predicate vars_in_range (n : int) (c : clause) =
  forall l:lit. mem l c -> 0 <= l.var < n

type cnf = { clauses : array clause ; nvars : int }     (* DO NOT CHANGE *)
  invariant { nvars >= 0 }                              (* DO NOT CHANGE *)
  invariant { forall i:int. 0 <= i < length clauses ->  (* DO NOT CHANGE *)
              vars_in_range nvars clauses[i] }
  by { clauses = Array.make 0 Nil; nvars = 0 }

type valuation = array bool                             (* DO NOT CHANGE *)

predicate valid_valuation (rho : valuation) (cnf : cnf) =
  length rho = cnf.nvars                                (* DO NOT CHANGE *)

predicate clause_sat_with (rho : valuation) (c : clause) =
  exists l:lit. mem l c && rho[l.var] = l.sign

predicate sat_with (rho : valuation) (cnf : cnf) =      (* DO NOT CHANGE *)
  forall i:int. 0 <= i < length cnf.clauses ->
  clause_sat_with rho cnf.clauses[i]

let rec function bool_eq (b1 : bool) (b2 : bool)
  ensures { result <-> (b1 <-> b2) }
  = (b1 && b2) || (not(b1) && not(b2)) 
    
let rec eval_clause (rho : valuation) (c : clause) : bool =
  variant { c }
  requires { vars_in_range (length rho) c }
  ensures  { result = clause_sat_with rho c }
  match c with
    | Nil -> false
    | Cons l ls ->
      rho[l.var] == l.sign || eval_clause rho ls
  end

let eval_cnf (rho : array bool) (cnf : cnf) : bool =
  requires { valid_valuation rho cnf }
  ensures { result = sat_with rho cnf }
  let sat = ref true in
  for i = 0 to length cnf.clauses - 1 do
    invariant { !sat <-> forall j:int. 0 <= j < i ->
                clause_sat_with rho cnf.clauses[j] = true }
    if not (eval_clause rho cnf.clauses[i]) then
      sat := false
  done ;
  !sat

(******************************************************************************)
(* Helpful definitions and utility functions                                  *)
(******************************************************************************)

predicate var_in_clause (v : var) (c : clause) =
  exists l. mem l c && l.var = v

predicate sign_in_clause (v : var) (c : clause) (b : bool) =
  (exists l. mem l c && l.var = v && l.sign = b)

predicate equal_clause (c1 : clause) (c2 : clause) =
  forall l. mem l c1 <-> mem l c2

let rec var_in_clause (v : var) (c : clause) : bool
  ensures { result <-> exists l. l.var = v && mem l c }
  variant { c }
  =
  Q.mem (fun l1 l2 -> l1.var = l2.var) { var=v ; sign=false } c

let rec lit_in_clause (l : lit) (c : clause) : bool
  ensures   { result <-> mem l c }
  ensures   { result <-> (sign_in_clause l.var c l.sign) }
  variant   { c }
  =
  Q.mem (fun l1 l2 -> l1.var = l2.var && l1.sign == l2.sign) l c

let rec check_clause_contained (c1 : clause) (c2 : clause) : bool
  ensures   { result <-> forall l. mem l c1 -> mem l c2 }
  variant   { c1 }
  =
  match c1 with
  | Nil -> true
  | Cons l ls -> (lit_in_clause l c2) && (check_clause_contained ls c2)
  end

let rec check_equal_clause (c1 : clause) (c2 : clause) : bool
  ensures   { result <-> equal_clause c1 c2 }
  variant   { c1 }
  =
  let c1_contained = check_clause_contained c1 c2 in
  let c2_contained = check_clause_contained c2 c1 in
  c1_contained && c2_contained

let clause_in_cnf (c : clause) (cnf : cnf) : bool
  ensures   { result <-> exists i. 0 <= i < cnf.clauses.length && equal_clause c cnf.clauses[i] }
  =
  let ref r = false in
  for i = 0 to cnf.clauses.length - 1 do
    invariant { r <-> exists j. 0 <= j < i && equal_clause c cnf.clauses[j] }
    if r then ()
    else r <- check_equal_clause c cnf.clauses[i]
  done ;
  r

(******************************************************************************)
(* Partial valuations                                                         *)
(******************************************************************************)

type pval = array (option bool)                         (* DO NOT CHANGE *)

predicate valid_pval (pval : pval) (cnf : cnf) =
  length pval = cnf.nvars                               (* DO NOT CHANGE *)

predicate pval_eq (pval pval' : pval) = array_eq pval pval'

predicate assigned (pval : pval) (v : var) = pval[v] <> None

predicate compatible (pval : pval) (rho : valuation) =
  forall i:int, b:bool. 0 <= i < length pval ->
  pval[i] = Some b -> rho[i] = b

predicate sat_with_pval (pval : pval) (cnf : cnf) =
  forall rho:valuation. compatible pval rho -> sat_with rho cnf

predicate complete (pval : pval) =
  forall v. 0 <= v < length pval -> assigned pval v

(******************************************************************************)
(* Partial evaluation of CNFs                                                 *)
(******************************************************************************)

type cnf_status =                                       (* DO NOT CHANGE *)
  | Sat
  | Conflict clause
  | Unit_clause lit
  | Other

type clause_status =                                    (* DO NOT CHANGE *)
  | Satisfied
  | Conflicting
  | Unit lit
  | Unresolved

exception Conflict_found clause
exception Unit_found lit

predicate lit_sat (pval : pval) (lit : lit) =
  0 <= lit.var < pval.length /\
  exists b. pval[lit.var] = Some b /\ lit.sign = b

predicate lit_conflict (pval : pval) (lit : lit) =
  0 <= lit.var < pval.length /\
  exists b. pval[lit.var] = Some b /\ lit.sign <> b

predicate lit_unresolved (pval : pval) (lit : lit) =
  0 <= lit.var < pval.length /\
  pval[lit.var] = None

let rec function partial_eval_clause (pval : pval) (c : clause) : clause_status =
requires { vars_in_range (pval.length) c }
ensures { result = Satisfied <-> 
          (exists lit. sign_in_clause (lit.var) c (lit.sign) 
           /\ lit_sat pval lit) }
ensures { result = Conflicting <->
          (forall lit. sign_in_clause (lit.var) c (lit.sign) ->
           lit_conflict pval lit) }
ensures { forall lit. result = Unit lit -> 
          (sign_in_clause (lit.var) c (lit.sign) 
           /\ lit_unresolved pval lit
           /\ (forall lit'. lit' <> lit 
               /\ sign_in_clause (lit'.var) c (lit'.sign) ->
               lit_conflict pval lit'))}
variant { c }
  match c with
  | Nil -> Conflicting 
  | Cons x Nil -> (
    match pval[x.var] with
    | None -> Unit x
    | Some b -> if bool_eq x.sign b then Satisfied else Conflicting
    end)
  | Cons x xs -> (
    let rec_res = partial_eval_clause pval xs in
    match pval[x.var] with
    | None -> (
      match rec_res with
      | Satisfied -> Satisfied
      | Conflicting -> Unit x
      | Unit _ -> Unresolved
      | Unresolved -> rec_res
      end)
    | Some b -> (
        if bool_eq b x.sign then Satisfied else
        match rec_res with
        | Satisfied -> Satisfied
        | Conflicting -> Conflicting
        | Unit _ -> rec_res
        | Unresolved -> rec_res
        end)
    end)
  end

let partial_eval_cnf (pval : pval) (cnf : cnf) : cnf_status =
requires { forall i. 0 <= i < cnf.clauses.length -> 
           vars_in_range pval.length cnf.clauses[i] }
ensures { result = Sat <-> 
          (forall i. 0 <= i < cnf.clauses.length -> 
           partial_eval_clause pval cnf.clauses[i] = Satisfied) }
ensures { forall clause. result = Conflict clause -> 
          (exists i. 0 <= i < cnf.clauses.length 
           /\ partial_eval_clause pval cnf.clauses[i] = Conflicting) }
ensures { forall lit. result = Unit_clause lit -> 
          (exists i. 0 <= i < cnf.clauses.length 
           /\ partial_eval_clause pval cnf.clauses[i] = Unit lit) }
  try ( 
    let ref res = Sat in
    let ref i = 0 in 
    while i < cnf.clauses.length do  
    invariant { 0 <= i <= cnf.clauses.length }
    invariant { res = Sat <-> 
                (forall j. 0 <= j < i -> 
                 partial_eval_clause pval cnf.clauses[j] = Satisfied) }
    invariant { res = Sat \/ res = Other }
    variant { cnf.clauses.length - i }
      let clause = cnf.clauses[i] in
      match partial_eval_clause pval clause with
      | Conflicting -> raise Conflict_found clause
      | Unit l -> raise Unit_found l
      | Unresolved -> res <- Other
      | Satisfied -> ()
      end ;
      i <- i + 1;
    done ;
    res)
  with
  | Conflict_found clause -> Conflict clause
  | Unit_found l -> Unit_clause l
  end

end (* SatDefs *)

module ResolutionProof

  use int.Int
  use ref.Ref
  use list.List
  use list.Length as List
  use list.Append
  use list.NthNoOpt
  use list.Mem
  use array.Array
  use array.ArrayEq
  use option.Option

  use SatDefs (* From sat_base.mlw *)

  (* type resolution_chain = *)

  (* Define a type for certificates; you may want to define  *)
  type certificate = 
    | Assume clause 
    | Resolve certificate certificate var clause 

  let rec function lit_eq (lit1 : lit) (lit2 : lit)
    ensures { result <-> lit1.var = lit2.var /\ bool_eq lit1.sign lit2.sign }
    = lit1.var = lit2.var && bool_eq lit1.sign lit2.sign

  let rec function clause_eq (clause1 : clause) (clause2 : clause) 
    = match (clause1, clause2) with
    | (Nil, Nil) -> true
    | (Nil, _) -> false 
    | (_, Nil) -> false
    | (Cons x xs, Cons y ys) -> lit_eq x y && (clause_eq xs ys)
    end

  let function cnf_contains (c : clause) (cnf : cnf) : bool
    ensures { result <-> exists j. 0 <= j < cnf.clauses.length 
                                /\ clause_eq cnf.clauses[j] c }
    = let ref contains = false in
    let ref i = 0 in
    while i < cnf.clauses.length do 
      invariant { contains <-> exists j. 0 <= j < i /\ clause_eq cnf.clauses[j] c } 
      invariant { cnf.clauses = old cnf.clauses }
      invariant { 0 <= i <= cnf.clauses.length }
      variant { cnf.clauses.length - i }
      if (clause_eq cnf.clauses[i] c) then contains <- true ;
      i <- i + 1 ;
    done ;
    contains
  
  predicate valid_resolution (clause1 : clause) (clause2: clause) (v : var) (res : clause) 
    axiom val_res_axiom: forall clause1,clause2,res : clause. forall v: var.
                         (valid_resolution clause1 clause2 v res) <->
                        ((mem ({var=v; sign=true}) clause1 /\ mem ({var=v; sign=false}) clause2)
                          \/ (mem ({var=v; sign=false}) clause2 /\ mem ({var=v; sign=true}) clause2))
                      /\ (forall remaining : lit. remaining.var <> v 
                          /\ ((mem remaining clause1) \/ (mem remaining clause2)) 
                          <-> mem remaining res)

  predicate valid_resolution_chain (p : certificate) (cnf : cnf) =
    match p with
    | Assume _ -> cnf_contains Nil cnf
    | Resolve cert1 cert2 var res -> (
        match (cert1, cert2) with
        | (Assume clause1, Assume clause2) -> 
          cnf_contains clause1 cnf /\ cnf_contains clause2 cnf
          /\ valid_resolution clause1 clause2 var res
        | (Resolve _ _ _ clause1, Assume clause2) -> 
          cnf_contains clause2 cnf 
          /\ valid_resolution clause1 clause2 var res 
          /\ valid_resolution_chain cert1 cnf
        | (Assume clause1, Resolve _ _ _ clause2) -> 
          cnf_contains clause1 cnf 
          /\ valid_resolution clause1 clause2 var res 
          /\ valid_resolution_chain cert2 cnf
        | (Resolve _ _ _ clause1, Resolve _ _ _ clause2) ->
          valid_resolution clause1 clause2 var res 
          /\ valid_resolution_chain cert1 cnf 
          /\ valid_resolution_chain cert2 cnf
        end)
      
    end

  predicate valid_refutation (p : certificate) (cnf : cnf)  = (* Specify the set of valid refutations *)
    match p with
    | Assume Nil -> cnf_contains Nil cnf
    | Assume (Cons _ _) -> false
    | Resolve _ _ _ res -> clause_eq res Nil /\ valid_resolution_chain p cnf
    end

  let rec function clause_mem (lit : lit) (clause : clause) 
    ensures { result <-> exists l : lit. mem l clause /\ lit_eq lit l }
    = match clause with
    | Nil -> false
    | Cons x xs -> lit_eq lit x || clause_mem lit xs
    end

  let rec includes_all_except_forward (v : var) (res : clause) (clause1 : clause) (clause2 : clause)
    ensures { result <-> (forall remaining : lit. remaining.var <> v 
                          /\ ((clause_mem remaining clause1) \/ (clause_mem remaining clause2)) 
                          -> clause_mem remaining res) }
    variant { List.length clause1 + List.length clause2 }
    = match (clause1, clause2) with
    | (Nil, Nil) -> true
    | (Cons x xs, _) -> 
      if x.var <> v then 
        clause_mem x res && includes_all_except_forward v res xs clause2
      else includes_all_except_forward v res xs clause2
    | (_, Cons x xs) ->
      if x.var <> v then 
        clause_mem x res && includes_all_except_forward v res clause1 xs
      else includes_all_except_forward v res clause1 xs
    end

  let rec includes_all_except_reverse (v : var) (res : clause) (clause1 : clause) (clause2 : clause)
    ensures {result <-> (forall remaining : lit. mem remaining res ->
                         remaining.var <> v 
                         /\ ((clause_mem remaining clause1) \/ (clause_mem remaining clause2))) }
    variant { res }
    = match res with
    | Nil -> true
    | Cons x xs -> 
      x.var <> v && (clause_mem x clause1 || clause_mem x clause2) 
      && includes_all_except_reverse v xs clause1 clause2
    end

  let includes_all_except (v : var) (res : clause) (clause1 : clause) (clause2 : clause)
    ensures {result <-> (forall remaining : lit. remaining.var <> v 
                          /\ ((mem remaining clause1) \/ (mem remaining clause2)) 
                          <-> mem remaining res) }
    = includes_all_except_forward v res clause1 clause2 
      && includes_all_except_reverse v res clause1 clause2
    
  let valid_resolution_fn (clause1 : clause) (clause2: clause) (v : var) (res : clause)  : bool
    ensures { result <-> valid_resolution clause1 clause2 v res }
    = ((clause_mem ({var=v; sign=true}) clause1
        && clause_mem ({var=v; sign=false}) clause2)
      || (clause_mem ({var=v; sign=false}) clause2
        && clause_mem ({var=v; sign=true}) clause2))
    && includes_all_except v res clause1 clause2

  let rec valid_resolution_chain_fn (p : certificate) (cnf : cnf) : bool
    ensures { result <-> valid_resolution_chain p cnf }
    variant { p }
    = match p with
    | Assume _ -> cnf_contains Nil cnf
    | Resolve cert1 cert2 var res -> (
        match (cert1, cert2) with
        | (Assume clause1, Assume clause2) -> 
          cnf_contains clause1 cnf && cnf_contains clause2 cnf
          && valid_resolution_fn clause1 clause2 var res
        | (Resolve _ _ _ clause1, Assume clause2) -> 
          cnf_contains clause2 cnf 
          && valid_resolution_fn clause1 clause2 var res 
          && valid_resolution_chain_fn cert1 cnf
        | (Assume clause1, Resolve _ _ _ clause2) -> 
          cnf_contains clause1 cnf 
          && valid_resolution_fn clause1 clause2 var res 
          && valid_resolution_chain_fn cert2 cnf
        | (Resolve _ _ _ clause1, Resolve _ _ _ clause2) ->
          valid_resolution_fn clause1 clause2 var res 
          && valid_resolution_chain_fn cert1 cnf 
          && valid_resolution_chain_fn cert2 cnf
        end)
      
    end

  let check_refutation (p : certificate) (cnf : cnf) : bool
    requires { true } (* Any necessary preconditions *)
    ensures { result <-> valid_refutation p cnf }  (* DO NOT CHANGE POSTCONDITION *)
    = match p with
    | Assume Nil -> cnf_contains Nil cnf
    | Assume _ -> false
    | Resolve _ _ _ res -> clause_eq res Nil && valid_resolution_chain_fn p cnf
    end
end (* ResolutionProof *)



module Solver

use int.Int
use ref.Ref
use list.List
use list.Length as List
use list.Mem
use list.Append
use array.Array
use array.ArrayEq
use option.Option



use SatDefs (* From sat_base.mlw *)
use ResolutionProof (* From resolution.mlw *)



(*Types and shared helper functions*)

(*define a type for producing certificate*)
type certChain =
  | Chain certificate
  | Empty   (*Help distinguish where nothing is found yet*)

let extract_sat_valuation (pval : pval) (cnf : cnf) : valuation =
  requires { valid_pval pval cnf }
  requires { sat_with_pval pval cnf }
  ensures  { sat_with result cnf }

  let rho = Array.make (length pval) false in
  for i = 0 to length pval - 1 do
    invariant { forall j:int, b:bool.
      0 <= j < i -> pval[j] = Some b -> rho[j] = b }
    match pval[i] with
    | None -> ()
    | Some v -> rho[i] <- v
    end
  done ;
  assert { compatible pval rho } ;
  rho

let rec clause_combine_except (cl : clause) (v: var) : clause =
    match cl with 
        | Nil -> Nil
        | Cons x xs -> (let newCl = (clause_combine_except xs v ) in
                if (lit_in_clause x newCl) then newCl else 
                    (if (x.var = v) then newCl else (Cons x newCl) ) )
    end

let rec valid_counter_clause (c : clause) (rho : valuation) (lit : lit) : bool =
    requires{vars_in_range rho.length c}
    diverges
    match c with
        | Nil -> true
        | Cons l ls -> (if l.var > lit.var then false 
                       else 
                        (if (l.var = lit.var) then 
                            (if (bool_eq l.sign lit.sign) then false
                            else (valid_counter_clause ls rho lit ))
                         else 
                            (if (bool_eq rho[l.var] l.sign) then false
                            else (valid_counter_clause ls rho lit ) ) ) )
    end

let rec search_for_ref (rho : valuation) (cnf : cnf) (lit : lit) (i : int) : certChain =
    
    if ( i < (length cnf.clauses) ) then
        (*check if current clause satisfies conflict*)
        ( if ( (var_in_clause lit.var cnf.clauses[i]) && (valid_counter_clause cnf.clauses[i] rho lit) )
         then ( Chain (Assume cnf.clauses[i]) )
         else (search_for_ref rho cnf lit (i+1)) )
    else Empty

let get_unit_ref (rho : valuation) (cnf : cnf) (lit : lit) (prev : certChain) : certChain =
    match prev with
        | Empty -> (search_for_ref rho cnf lit 0)
        | _ -> prev
    end


let apply_resolution (cert1: certificate) (cert2: certificate) (var : var) : certChain =
    (*must have true var on left and false on right*)
    let ref cl1 = Nil in
    let ref cl2 = Nil in
    match (cert1, cert2) with
        | (Assume clause1, Assume clause2) ->
            cl1 <- clause1 ; cl2 <-clause2
        | (Resolve _ _ _ clause1, Assume clause2) ->
            cl1 <- clause1 ; cl2 <-clause2
        | (Assume clause1, Resolve _ _ _ clause2) -> 
            cl1 <- clause1 ; cl2 <-clause2
        | (Resolve _ _ _ clause1, Resolve _ _ _ clause2) ->
            cl1 <- clause1 ; cl2 <-clause2 
    end;
    if ( var_in_clause var cl1 ) then 
       ( 
         if ( var_in_clause var cl2 ) then 
            Chain (Resolve cert1 cert2 var ( clause_combine_except (cl1 ++ cl2) var )) 
         else 
            Chain cert2 (*avoid term with clause if clause is irrelevant*)
        )
    else (
          if ( var_in_clause var cl2 ) then 
            Chain cert1
         else 
            Chain cert1 (*Does not appear in both, then both trees must have same structure,
                  Thus producing the exact same result*)
        )



(******************************************************************************)
(* Routines for managing solver state                                         *)
(******************************************************************************)


let rec backtrack (diff : list var) (pval : pval) =
  match diff with 
  | Nil -> ()
  | Cons x xs -> ( pval[x] <- None ; backtrack xs pval )
  end

exception Sat_found

let rec get_conflict_clause (pval : pval) (cnf : cnf) : clause =
  let ref conflictC = Nil in
  let ref i = 0 in
  while i < cnf.clauses.length do 
      match partial_eval_clause pval cnf.clauses[i] with
        | Satisfied -> ( i <- i + 1 )
        | Conflicting -> ( conflictC <- cnf.clauses[i] ; i <- cnf.clauses.length )
        | Unit lit -> ( i <- i + 1 )
        | Unresolved -> ( i <- i + 1 )
      end;
  done ;
  conflictC

let rec get_unit_clause (l : lit) (pval : pval) (cnf : cnf) : clause =
  let ref unitC = Nil in
  let ref i = 0 in
  while i < cnf.clauses.length do 
      match partial_eval_clause pval cnf.clauses[i] with
        | Satisfied -> ( i <- i + 1 )
        | Conflicting -> ( i <- i + 1 ) (*what happens here?*)
        | Unit lit -> (
            if (l.var = lit.var && l.sign == lit.sign) then 
                ( unitC <- cnf.clauses[i] ; i <- cnf.clauses.length )
            else ( i <- i + 1 ) 
            )
        | Unresolved -> ( i <- i + 1 )
      end;
  done ;
  unitC



(*Modified the return result to give out a refutation chain instead*)
let rec set_sign (l : lit) (pval : pval) (cnf : cnf) : (bool, certChain, list var) =
  pval[l.var] <- Some (l.sign);
  try ( match partial_eval_cnf pval cnf with
          | Sat -> Raise Sat_found
          | Other -> ( false, Empty , Cons l.var Nil )
        end
      )
  with
    | Conflict_found -> ( true, Chain (Assume (get_conflict_clause pval cnf)), Cons l.var Nil )
    | Unit_found newLit -> 
        (
          match (set_sign newLit pval cnf) with
            | (false, _, listV ) -> (false, Empty, Cons l.var listV )
            | (true, Empty , listV ) -> ( true, Empty, Cons l.var listV)
            | (true, Chain cert1, listV) ->
              (true , (apply_resolution cert1 (get_unit_clause newLit pval cnf) newLit.var), Cons l.var listV)
          end 
        )
  end



(******************************************************************************)
(* Main algorithm                                                             *)
(******************************************************************************)

(*
  You should not change the following type for the checkpoint.
  For the final submission, you should change
    `Assignment valuation`
  to
    `Assignment pval`
*)
type solver_result =
  | Assignment valuation
  | Proof certificate


exception Sat
exception InvalidCert

let find_next_unassigned (v : var) (pval : pval) : var =
  let ref ans = pval.length in
  let ref i = v in
  while i < pval.length do 
    match pval[v] with
      | None -> (res <- ans; i <- pval.length )
      | Some _ -> (i <- i+1 )
    end;
  done;
  ans

let sat (cnf : cnf) : solver_result =
  ensures { forall t. result = Assignment t -> sat_with t cnf }     (* DO NOT CHANGE *)
  ensures { forall p. result = Proof p -> valid_refutation p cnf }  (* DO NOT CHANGE *)
  diverges 
  raises  { InvalidCert }

  let p = make cnf.nvars None in 
  let rec split i : certChain =
    variant  { cnf.nvars - i }
    requires { 0 <= i <= cnf.nvars }
    raises   { Sat_found -> sat_with_pval p cnf }

    if i = cnf.nvars then Empty (*We should never reach here*)
    else begin
      match ( set_sign ({var = i, sign = false}) p cnf ) with
        | (false, _, listVL) -> (
                let ref leftCert = split (find_next_unassigned i pval) in
                  backtrack listVL pval; (*revert changes and try right side *)
                  match ( set_sign ({var = i, sign = true}) p cnf ) with
                    | (false, _ , listVR) -> ( 
                        let ref rightCert = split (find_next_unassigned i pval) in
                          (apply_resolution leftCert rightCert i)
                        )
                    | (true, rightCert , _ ) -> ( apply_resolution leftCert rightCert i )
                  end
                )     
        | (true, leftCert, listVL ) -> (
                backtrack listVL pval; (*revert changes and try right side *)
                match ( set_sign ({var = i, sign = true}) p cnf ) with
                    | (false, _ , listVR) -> ( 
                        let ref rightCert = split (find_next_unassigned i pval) in
                          (apply_resolution leftCert rightCert i)
                        )
                    | (true, rightCert , _ ) -> ( apply_resolution leftCert rightCert i )
                end
                )
    end

  in try ( match split 0 with 
        | Empty -> raise InvalidCert
        | Chain cert -> if (check_refutation cert cnf) then (Proof cert) else raise InvalidCert
        end )
    with Sat_found ->  Assignment ( extract_sat_valuation p cnf) end


(*Orignial Baby sat kept for reference*)
(*
let sat (cnf : cnf) : solver_result =
  ensures { forall t. result = Assignment t -> sat_with t cnf }     (* DO NOT CHANGE *)
  ensures { forall p. result = Proof p -> valid_refutation p cnf }  (* DO NOT CHANGE *)
  diverges 
  raises  { InvalidCert }

  let t = make cnf.nvars false in 
  let rec split i : certChain =
    variant  { cnf.nvars - i }
    requires { 0 <= i <= cnf.nvars }
    ensures  { array_eq_sub (old t) t 0 i }
    raises   { Sat -> sat_with t cnf }

    if i = cnf.nvars then begin
      if eval_cnf t cnf then raise Sat else Empty
    end
    else begin
      let ref left = Empty in
      let ref right = Empty in
      t[i] <- false ; left <- split (i + 1) ;
      t[i] <- true  ; right <- split (i + 1) ;
      (*Conflict reached, attempt to generate cert*)
      let ref procLeft = get_unit_ref t cnf ({var=i ;sign=false }) left in
      let ref procRight = get_unit_ref t cnf ({var=i ;sign=true }) right in
      match (procLeft, procRight) with
        | (Empty, Empty) -> Empty
        | (Empty, _) -> procRight
        | (_, Empty) -> procLeft  
        | (Chain cert1, Chain cert2) -> (apply_resolution cert1 cert2 i) (**)
        end 
    end
  in try ( match split 0 with 
        | Empty -> raise InvalidCert
        | Chain cert -> if (check_refutation cert cnf) then (Proof cert) else raise InvalidCert
        end )
    with Sat -> Assignment t end
*)


end (* Solver *)
